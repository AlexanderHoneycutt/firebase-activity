{"version":3,"sources":["Controls.js","NoiseField.js","ControlSettings.js","SvgDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Controls","style","marginLeft","width","display","Object","keys","this","props","inputs","map","key","i","Typography","label","Slider","onChange","event","newValue","onUpdate","defaultValue","value","min","max","React","Component","TAU","Math","PI","simplex","SimplexNoise","NoiseField","_","range","num_lines","y","random","seed","x","v","PVector","isInside","d","angle","noise3D","noiseScale","add","fromAngle","setMag","stepLength","max_steps","stroke","lineColor","strokeWidth","fill","defaultProps","height","ControlSettings","SvgDisplay","svgs","sort","a","b","time","Container","textAlign","marginTop","src","svg","showLikes","onClick","cursor","likes","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","uiConfig","signInFlow","signInSuccessUrl","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","App","state","backgroundColor","isSignedIn","favoritesRef","database","ref","publicRef","on","snapshot","setState","public","val","like","bind","obj","unregisterAuthObserver","onAuthStateChanged","user","child","uid","favorites","svgStr","XMLSerializer","serializeToString","document","querySelector","currentUser","push","ServerValue","TIMESTAMP","svgId","console","log","transaction","AppBar","Button","textDecoration","color","to","position","right","signOut","path","exact","margin","variant","gutterBottom","handleChange","htmlFor","type","target","marginBottom","save","share","verticalAlign","firebaseAuth","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.68a05d2b.chunk.js","sourcesContent":["import React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\n\nexport class Controls extends React.Component {\n    render() {\n        return (\n            <div style={{ marginLeft: \"10px\", width: \"200px\", display: \"inline-block\" }}>\n                {Object.keys(this.props.inputs).map((key, i) => {\n                    return (\n                        <div key={i}>\n                            <Typography>{this.props.inputs[key].label}</Typography>\n                            <Slider\n                                key={key}\n                                onChange={(event, newValue) => this.props.onUpdate(newValue, key)}\n                                defaultValue={this.props.inputs[key].value}\n                                min={this.props.inputs[key].min}\n                                max={this.props.inputs[key].max} />\n                        </div>\n                    )\n                })\n                }\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport SimplexNoise from 'simplex-noise';\nimport PVector from 'pvectorjs';\nimport _ from 'lodash';\nconst TAU = Math.PI * 2;\nconst simplex = new SimplexNoise();\nconst height = 600;\nconst width = 900;\nexport class NoiseField extends React.Component {\n    render() {\n        return (\n            _.range(this.props.num_lines).map(() => {\n                let i = 0;\n                let y = Math.random(this.props.seed) * height;\n                let x = Math.random(this.props.seed) * width;\n                let v = PVector(x, y)\n\n                let isInside = true;\n                let d = `M${x} ${y}`\n                while (isInside) {\n                    const angle = simplex.noise3D(v.x / this.props.noiseScale, v.y / this.props.noiseScale, this.props.seed) * TAU;\n                    v.add(PVector.fromAngle(angle).setMag(this.props.stepLength))\n                    isInside = (v.x) >= 0 && (v.x) <= width && (v.y) >= 0 && (v.y) <= height && i < this.props.max_steps;\n                    d += `L${v.x} ${v.y}`;\n                    i++;\n                }\n                return (<path\n                    stroke={this.props.lineColor}\n                    strokeWidth=\"1px\"\n                    fill=\"none\"\n                    d={d}\n                />)\n            })\n        )\n    }\n\n}\n\n// Default values\nNoiseField.defaultProps = {\n    noiseScale: 100,\n    width: 500,\n    height: 500,\n    seed: 1,\n    num_lines: 100,\n    max_steps: 10,\n    stepLength: 10,\n    lineColor: \"black\"\n}","const ControlSettings =  {\n    num_lines: {\n        label: \"Number of Lines\",\n        min: 1,\n        max: 500,\n        value: 200\n    },\n    stepLength: {\n        label: \"Length of Each Step\",\n        min: 1,\n        max: 100,\n        value: 30\n    },\n    max_steps: {\n        label: \"Maximum Number of Steps\",\n        min: 1,\n        max: 500,\n        value: 200\n    },\n    noiseScale: {\n        label: \"Noise Scale\",\n        min: 100,\n        max: 3000,\n        value: 1000\n    }\n\n}\n\nexport default ControlSettings;","\nimport InlineSVG from 'svg-inline-react';\nimport React from 'react';\nimport Container from '@material-ui/core/Container';\nimport {FaHeart} from 'react-icons/fa'\nexport default function SvgDisplay(props) {\n    return (\n        <div>\n            {props.svgs && Object.keys(props.svgs).sort((a, b) => props.svgs[b].time - props.svgs[a].time).map((d) => {\n                return (<Container style={{textAlign:\"center\", marginTop:\"40px\"}}>\n                            <InlineSVG src={props.svgs[d].svg} />                            \n                            {props.showLikes && \n                                <span onClick = {() => props.onClick(d)}><FaHeart fill=\"red\" style={{cursor:\"pointer\"}}/><span>{props.svgs[d].likes}</span></span>}\n                        </Container>)\n            })}\n        </div>\n    )\n}","import React from 'react';\nimport { Controls } from './Controls';\nimport { NoiseField } from './NoiseField';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport ControlSettings from './ControlSettings';\nimport SvgDisplay from './SvgDisplay';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n// Firebase \nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\n\n// Configure Firebase.\nconst config = {\n    apiKey: \"AIzaSyA3Qq8ALZ0RLZyThRCeX1WtyEymYr7zNlU\",\n    authDomain: \"fir-952d8.firebaseapp.com\",\n    databaseURL: \"https://fir-952d8.firebaseio.com\",\n    projectId: \"fir-952d8\",\n    storageBucket: \"fir-952d8.appspot.com\",\n    messagingSenderId: \"896239704744\",\n    appId: \"1:896239704744:web:0eb0d811207267973b409d\",\n    measurementId: \"G-3HDCV3RNSQ\"\n};\nfirebase.initializeApp(config);\n\n// UI config\nconst uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: 'popup',\n    // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n    signInSuccessUrl: '',\n    // We will display Google and Facebook as auth providers.\n    signInOptions: [\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n        firebase.auth.FacebookAuthProvider.PROVIDER_ID\n    ]\n};\n\nconst height = 600;\nconst width = 900;\n\nexport class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            num_lines: ControlSettings.num_lines.value,\n            noiseScale: ControlSettings.noiseScale.value,\n            seed: 1,\n            max_steps: ControlSettings.max_steps.value,\n            stepLength: ControlSettings.stepLength.value,\n            lineColor: \"#FF0000\",\n            backgroundColor: \"#000000\",\n            isSignedIn: false, // Local signed-in state.\n        }\n        this.favoritesRef = firebase.database().ref('favorites');\n        this.publicRef = firebase.database().ref('public');\n        this.publicRef.on(\"value\", (snapshot) => {\n            this.setState({ public: snapshot.val() })\n        })\n        this.like = this.like.bind(this);\n    }\n    handleChange(value, key) {\n        let obj = {};\n        obj[key] = value;\n        this.setState(obj);\n    }\n\n    // Listen to the Firebase Auth state and set the local state.\n    componentDidMount() {\n        this.unregisterAuthObserver = firebase.auth().onAuthStateChanged((user) => {                        \n            this.setState({ isSignedIn: !!user })            \n            const userRef = this.favoritesRef.child(user.uid);\n            userRef.on(\"value\", (snapshot) => {\n                this.setState({ favorites: snapshot.val() })\n            })            \n           \n        })\n    }\n\n    // Make sure we un-register Firebase observers when the component unmounts.\n    componentWillUnmount() {\n        this.unregisterAuthObserver();\n    }\n    save() {\n        const s = new XMLSerializer();\n        const svgStr = s.serializeToString(document.querySelector(\"svg\"));\n        const userRef = this.favoritesRef.child(firebase.auth().currentUser.uid)\n        userRef.push({\n            svg: svgStr,\n            time:firebase.database.ServerValue.TIMESTAMP\n        });\n    }\n\n    share() {\n        const s = new XMLSerializer();\n        const svgStr = s.serializeToString(document.querySelector(\"svg\"));        \n        this.publicRef.push({\n            svg: svgStr,\n            time:firebase.database.ServerValue.TIMESTAMP, \n            likes:0\n        });\n    }\n\n    like(svgId) {\n        console.log(this.svgId)\n        const likesRef = this.publicRef.child(svgId + \"/likes\");\n        likesRef.transaction((d) => d + 1);\n    }\n    render() {\n        if (!this.state.isSignedIn) {\n            return (\n                <div>\n                    <h1>My App</h1>\n                    <p>Please sign-in:</p>\n                    <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n                </div>\n            );\n        }\n        return (\n            <Router>\n                <div>\n                    <AppBar>\n                        <nav>\n                            <Button><Link style={{ textDecoration: 'none', color:\"white\"}} to=\"/\">Build</Link></Button>\n                            <Button><Link style={{ textDecoration: 'none', color:\"white\"}} to=\"/favorites\">My Favorites</Link></Button>\n                            <Button><Link style={{ textDecoration: 'none', color:\"white\"}} to=\"/shared\">Shared</Link></Button>\n                            <Button style={{ position: \"fixed\", right: \"10px\", color:\"white\"}} onClick={() => firebase.auth().signOut()}>Sign-out</Button>\n                        </nav>\n                    </AppBar>\n                \n                    <Switch>\n                    <Route path=\"/favorites\">\n                        <SvgDisplay svgs={this.state.favorites}/>                        \n                    </Route>\n                    <Route path=\"/shared\">\n                        <SvgDisplay svgs={this.state.public} onClick = {(d) => this.like(d)} showLikes={true}/> \n                    </Route>\n                    <Route exact path=\"/\">\n                        <div style={{ display: \"inline-block\", margin: \"20px\", marginTop:\"50px\"}}>                            \n                            <div style={{ display: \"inline-block\", width: \"300px\" }}>\n                                <Typography variant=\"h6\" gutterBottom>Controls</Typography>\n                                <Controls onUpdate={this.handleChange.bind(this)} inputs={ControlSettings} />\n\n                                <div style={{ display: \"inline-block\" }}>\n                                    <label htmlFor=\"color\">Line Color: </label>\n                                    <input defaultValue={this.state.lineColor} type=\"color\" onChange={(event) => this.handleChange(event.target.value, \"lineColor\")} />\n                                </div>\n\n                                <div style={{ display: \"inline-block\" }}>\n                                    <label htmlFor=\"color\">Background Color: </label>\n                                    <input type=\"color\" onChange={(event) => this.handleChange(event.target.value, \"backgroundColor\")} />\n                                </div>\n                                <div>\n                                    <Button style={{width:\"100px\", marginBottom:\"10px\", display:\"block\"}} variant=\"contained\" color=\"primary\" onClick={() => this.save()}>Save</Button>                                    \n                                    <Button style={{width:\"100px\", marginBottom:\"10px\", display:\"block\"}} variant=\"contained\" color=\"primary\" onClick={() => this.share()}>Share</Button>\n                                </div>\n                            </div>\n                            <div style={{ display: \"inline-block\", verticalAlign: \"Top\" }}>\n                                <svg height={height} width={width} >\n                                    <rect height={height} width={width} fill={this.state.backgroundColor} />\n                                    <NoiseField\n                                        num_lines={this.state.num_lines}\n                                        max_steps={this.state.max_steps}\n                                        stepLength={this.state.stepLength}\n                                        noiseScale={this.state.noiseScale}\n                                        lineColor={this.state.lineColor}\n                                    />\n                                </svg >\n                            </div>                            \n                        </div>\n                    </Route>\n                    </Switch>                \n                </div>\n            </Router>\n            \n        );\n    }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}